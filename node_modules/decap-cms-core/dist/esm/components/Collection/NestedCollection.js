import _styled from "@emotion/styled/base";
import _sortBy from "lodash/sortBy";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import { List } from 'immutable';
import { css } from '@emotion/react';
import { connect } from 'react-redux';
import { NavLink } from 'react-router-dom';
import { dirname, sep } from 'path';
import { stringTemplate } from 'decap-cms-lib-widgets';
import { Icon, colors, components } from 'decap-cms-ui-default';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { selectEntries } from '../../reducers/entries';
import { selectEntryCollectionTitle } from '../../reducers/collections';
import { jsx as ___EmotionJSX } from "@emotion/react";
const {
  addFileTemplateFields
} = stringTemplate;
const NodeTitleContainer = /*#__PURE__*/_styled("div", {
  target: "eh84wlq5",
  label: "NodeTitleContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1vcob1d",
  styles: "display:flex;justify-content:center;align-items:center"
} : {
  name: "1vcob1d",
  styles: "display:flex;justify-content:center;align-items:center",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const NodeTitle = /*#__PURE__*/_styled("div", {
  target: "eh84wlq4",
  label: "NodeTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "qamjgr",
  styles: "margin-right:4px"
} : {
  name: "qamjgr",
  styles: "margin-right:4px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Caret = /*#__PURE__*/_styled("div", {
  target: "eh84wlq3",
  label: "Caret"
})(process.env.NODE_ENV === "production" ? {
  name: "1lo1a34",
  styles: "position:relative;top:2px"
} : {
  name: "1lo1a34",
  styles: "position:relative;top:2px",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CaretDown = /*#__PURE__*/_styled(Caret, {
  target: "eh84wlq2",
  label: "CaretDown"
})(components.caretDown, ";color:currentColor;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CaretRight = /*#__PURE__*/_styled(Caret, {
  target: "eh84wlq1",
  label: "CaretRight"
})(components.caretRight, ";color:currentColor;left:2px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TreeNavLink = /*#__PURE__*/_styled(NavLink, {
  target: "eh84wlq0",
  label: "TreeNavLink"
})("display:flex;font-size:14px;font-weight:500;align-items:center;padding:8px;padding-left:", props => props.depth * 16 + 18, "px;border-left:2px solid #fff;", Icon, "{margin-right:4px;flex-shrink:0;}", props => /*#__PURE__*/css("&:hover,&:active,&.", props.activeClassName, "{color:", colors.active, ";background-color:", colors.activeBackground, ";border-left-color:#4863c6;};label:TreeNavLink;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function getNodeTitle(node) {
  var _node$children$find;
  const title = node.isRoot ? node.title : ((_node$children$find = node.children.find(c => !c.isDir && c.title)) === null || _node$children$find === void 0 ? void 0 : _node$children$find.title) || node.title;
  return title;
}
function TreeNode(props) {
  var _collection$get;
  const {
    collection,
    treeData,
    depth = 0,
    onToggle
  } = props;
  const collectionName = collection.get('name');
  const sortedData = _sortBy(treeData, getNodeTitle);
  const subfolders = ((_collection$get = collection.get('nested')) === null || _collection$get === void 0 ? void 0 : _collection$get.get('subfolders')) !== false;
  return sortedData.map(node => {
    var _node$children$;
    const leaf = depth > 0 && (subfolders ? node.children.length <= 1 && !((_node$children$ = node.children[0]) !== null && _node$children$ !== void 0 && _node$children$.isDir) : node.children.length === 0);
    if (leaf) {
      return null;
    }
    let to = `/collections/${collectionName}`;
    if (depth > 0) {
      to = `${to}/filter${node.path}`;
    }
    const title = getNodeTitle(node);
    const hasChildren = depth === 0 || (subfolders ? node.children.some(c => c.children.some(c => c.isDir)) : node.children.some(c => c.isDir));
    return ___EmotionJSX(React.Fragment, {
      key: node.path
    }, ___EmotionJSX(TreeNavLink, {
      exact: true,
      to: to,
      activeClassName: "sidebar-active",
      onClick: () => onToggle({
        node,
        expanded: !node.expanded
      }),
      depth: depth,
      "data-testid": node.path
    }, ___EmotionJSX(Icon, {
      type: "write"
    }), ___EmotionJSX(NodeTitleContainer, null, ___EmotionJSX(NodeTitle, null, title), hasChildren && (node.expanded ? ___EmotionJSX(CaretDown, null) : ___EmotionJSX(CaretRight, null)))), node.expanded && ___EmotionJSX(TreeNode, {
      collection: collection,
      depth: depth + 1,
      treeData: node.children,
      onToggle: onToggle
    }));
  });
}
TreeNode.propTypes = {
  collection: ImmutablePropTypes.map.isRequired,
  depth: PropTypes.number,
  treeData: PropTypes.array.isRequired,
  onToggle: PropTypes.func.isRequired
};
export function walk(treeData, callback) {
  function traverse(children) {
    for (const child of children) {
      callback(child);
      traverse(child.children);
    }
  }
  return traverse(treeData);
}
export function getTreeData(collection, entries) {
  const collectionFolder = collection.get('folder');
  const rootFolder = '/';
  const entriesObj = entries.toJS().map(e => _objectSpread(_objectSpread({}, e), {}, {
    path: e.path.slice(collectionFolder.length)
  }));
  const dirs = entriesObj.reduce((acc, entry) => {
    let dir = dirname(entry.path);
    while (!acc[dir] && dir && dir !== rootFolder) {
      const parts = dir.split(sep);
      acc[dir] = parts.pop();
      dir = parts.length && parts.join(sep);
    }
    return acc;
  }, {});
  if (collection.getIn(['nested', 'summary'])) {
    collection = collection.set('summary', collection.getIn(['nested', 'summary']));
  } else {
    collection = collection.delete('summary');
  }
  const flatData = [{
    title: collection.get('label'),
    path: rootFolder,
    isDir: true,
    isRoot: true
  }, ...Object.entries(dirs).map(([key, value]) => ({
    title: value,
    path: key,
    isDir: true,
    isRoot: false
  })), ...entriesObj.map((e, index) => {
    let entryMap = entries.get(index);
    entryMap = entryMap.set('data', addFileTemplateFields(entryMap.get('path'), entryMap.get('data')));
    const title = selectEntryCollectionTitle(collection, entryMap);
    return _objectSpread(_objectSpread({}, e), {}, {
      title,
      isDir: false,
      isRoot: false
    });
  })];
  const parentsToChildren = flatData.reduce((acc, node) => {
    const parent = node.path === rootFolder ? '' : dirname(node.path);
    if (acc[parent]) {
      acc[parent].push(node);
    } else {
      acc[parent] = [node];
    }
    return acc;
  }, {});
  function reducer(acc, value) {
    const node = value;
    let children = [];
    if (parentsToChildren[node.path]) {
      children = parentsToChildren[node.path].reduce(reducer, []);
    }
    acc.push(_objectSpread(_objectSpread({}, node), {}, {
      children
    }));
    return acc;
  }
  const treeData = parentsToChildren[''].reduce(reducer, []);
  return treeData;
}
export function updateNode(treeData, node, callback) {
  let stop = false;
  function updater(nodes) {
    if (stop) {
      return nodes;
    }
    for (let i = 0; i < nodes.length; i++) {
      if (nodes[i].path === node.path) {
        nodes[i] = callback(node);
        stop = true;
        return nodes;
      }
    }
    nodes.forEach(node => updater(node.children));
    return nodes;
  }
  return updater([...treeData]);
}
export class NestedCollection extends React.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "onToggle", ({
      node,
      expanded
    }) => {
      if (!this.state.selected || this.state.selected.path === node.path || expanded) {
        const treeData = updateNode(this.state.treeData, node, node => _objectSpread(_objectSpread({}, node), {}, {
          expanded
        }));
        this.setState({
          treeData,
          selected: node,
          useFilter: false
        });
      } else {
        // don't collapse non selected nodes when clicked
        this.setState({
          selected: node,
          useFilter: false
        });
      }
    });
    this.state = {
      treeData: getTreeData(this.props.collection, this.props.entries),
      selected: null,
      useFilter: true
    };
  }
  componentDidUpdate(prevProps) {
    const {
      collection,
      entries,
      filterTerm
    } = this.props;
    if (collection !== prevProps.collection || entries !== prevProps.entries || filterTerm !== prevProps.filterTerm) {
      const expanded = {};
      walk(this.state.treeData, node => {
        if (node.expanded) {
          expanded[node.path] = true;
        }
      });
      const treeData = getTreeData(collection, entries);
      const path = `/${filterTerm}`;
      walk(treeData, node => {
        if (expanded[node.path] || this.state.useFilter && path.startsWith(node.path)) {
          node.expanded = true;
        }
      });
      this.setState({
        treeData
      });
    }
  }
  render() {
    const {
      treeData
    } = this.state;
    const {
      collection
    } = this.props;
    return ___EmotionJSX(TreeNode, {
      collection: collection,
      treeData: treeData,
      onToggle: this.onToggle
    });
  }
}
_defineProperty(NestedCollection, "propTypes", {
  collection: ImmutablePropTypes.map.isRequired,
  entries: ImmutablePropTypes.list.isRequired,
  filterTerm: PropTypes.string
});
function mapStateToProps(state, ownProps) {
  const {
    collection
  } = ownProps;
  const entries = selectEntries(state.entries, collection) || List();
  return {
    entries
  };
}
export default connect(mapStateToProps, null)(NestedCollection);